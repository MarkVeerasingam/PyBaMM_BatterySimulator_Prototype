import pybamm 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

def simulate_battery():

    model = pybamm.lithium_ion.DFN()
    custom_parameters = pybamm.ParameterValues("Chen2020")

    # Import drive cycle from file
    drive_cycle = pd.read_csv("US06.csv", comment="#", header=None).to_numpy()

    
    # drive cycle snippet
    drive_cycle = np.array([[0, 0,	4.178255081, 39.92520905],
                [0.139264, -184.5974121,	4.036471844, 39.8711853],
                [0.237568,	-184.8833618,	4.03249073,	39.8711853],
                [0.335872,	-185.0022583,	4.029868603,	39.8711853],
                [0.442368,	-185.1472168,	4.027357101,	39.8671608],
                [0.53248,	-185.2461548,	4.025063038,	39.8671608],
                [0.638976,	-185.319519,    4.023223877,	39.8671608],
                [0.73728,	-185.4052734,	4.021364689,	39.8671608],
                [0.843776,	-185.4545288,	4.019886494,	39.8671608],
                [0.94208,	-185.5421753,	4.018260956,	39.8671608],
                [1.040384,	-185.6124878,	4.016605854,	39.8671608],
                [1.138688,	-185.6817627,	4.015146732,	40.02028656],
                [1.236992,	-185.7332153,	4.013901234,	40.02028656],
                [1.343488,	-185.8170166,	4.012485027,	40.02028656],
                [1.441792,	-185.8728027,	4.011345387,	40.02028656],
                [1.540096,	-185.914856,    4.010089397,	40.02028656],
                [1.646592,	-185.9702148,	4.008943081,	40.02028656],
                [1.744896,	-186.0526123,	4.007782459,	40.02028656],
                [1.8432,	-186.1102295,	4.00637722,	    40.02028656],
                [1.949696,	-186.1390991,	4.005376816,	39.96378326],
                [2.048,	    -186.154541,	4.004361153,	39.96378326],
                [2.154496,	-186.2084961,	4.003252983,	39.96378326],
                [2.2528,	-186.2745972,	4.001954556,	39.96378326],
                [2.367488,	-186.3257446,	4.000907421,	39.96378326],
                [2.490368,	-186.373291,	3.99977231,	    39.96378326],
                [2.613248,	-186.4265747,	3.998755217,	39.99684906],
                [2.711552,	-186.4959717,	3.997748375,	39.99684906],
                [2.842624,	-186.5219727,	3.996665239,	39.99684906],
                [2.94912,	-186.5685425,	3.995596886,	39.99684906],
                [3.080192,	-186.6502075,	3.994441509,	39.99684906],
                [3.219456,	-186.6798706,	3.993362665,	39.99684906],
                [3.325952,	-186.7142944,	3.99222827,	    39.96478271],
                [3.465216,	-186.7851563,	3.991145134,	39.96478271],
                [3.620864,	-186.8465576,	3.990140915,	39.96478271],
                [3.735552,	-186.8771973,	3.989127159,	39.96478271],
                [3.866624,	-186.940918,	3.988111734,	39.96478271],
                [3.997696,	-186.9778442,	3.987061501,	39.96478271],
                [4.161536,	-187.0187988,	3.985952377,	40.02095795],
                [4.3008,	-187.1199951,	3.984705925,	40.02095795],
                [4.46464,	-187.1402588,	3.983659267,	40.02095795],
                [4.612096,	-187.1956177,	3.982604742,	40.02095795],
                [4.759552,	-187.2490234,	3.981431246,	40.10401917],
                [4.939776,	-187.2973633,	3.980323792,	40.10401917],
                [5.095424,	-187.3647461,	3.979264975,	40.10401917],
                [5.24288,	-187.4018555,	3.978199244,	40.10401917],
                [5.431296,	-187.4415894,	3.977194071,	40.10401917],
                [5.603328,	-187.510376,	3.976042271,	40.02743149],
                [5.767168,	-187.5344238,	3.974952221,	40.02743149]])

    # Create current interpolant
    current_interpolant = pybamm.Interpolant(drive_cycle[:, 0], drive_cycle[:, 1], pybamm.t)


    # set mesh with dict (all default)
    var_pts = {
        "x_n": 30,  # negative electrode
        "x_s": 30,  # separator
        "x_p": 30,  # positive electrode
        "r_n": 10,  # negative particle
        "r_p": 10,  # positive particle
    }

    # make solvers 
    # dt max changes the drive cycle sim
    safe_solver = pybamm.CasadiSolver(atol=1e-6, rtol=1e-6, mode="safe", dt_max=1e-6)

    # Set drive cycle
    #custom_parameters["Current function [A]"] = current_interpolant
    custom_parameters.update({ # all values below are default

            "Upper voltage cut-off [V]":    4.2, 
            "Lower voltage cut-off [V]":    2.5, 
            "Nominal cell capacity [A.h]":  10, # in Ah, typically recorded in mAh,
            "Ambient temperature [K]":      323.15,  
            "Current function [A]":         current_interpolant  # Make this non changeable for now 
        }) 

    safe_sim = pybamm.Simulation(model, parameter_values=custom_parameters, solver=safe_solver, var_pts=var_pts)
    safe_sim.solve()
    safe_sim.plot(["Current [A]", "Voltage [V]"])

# Run the simulation
simulate_battery()